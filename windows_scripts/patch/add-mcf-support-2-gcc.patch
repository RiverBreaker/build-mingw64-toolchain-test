From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: GCC Patch Contributor <patch@example.com>
Date: Thu, 1 Jan 1970 00:00:00 +0000
Subject: [PATCH] Add MCFGTHREAD support for MinGW

This patch adds support for mcfgthread threading model in GCC for MinGW targets.

---
 gcc/config.gcc                   |  3 +++
 gcc/configure                    |  2 +-
 gcc/configure.ac                 |  2 +-
 config/i386/mingw-mcfgthread.h   |  1 +
 gcc/config/i386/mingw32.h        | 12 ++++++++++++
 libatomic/configure.tgt          |  2 +-
 libgcc/config.host               |  6 ++++++
 libgcc/configure                 |  1 +
 libgcc/config/i386/gthr-mcf.h    | 14 ++++++++++++++
 libgcc/config/i386/t-mingw-mcfgthread |  2 ++
 libgcc/config/i386/t-slibgcc-cygming |  5 ++++-
 libstdc++-v3/configure           |  1 +
 libstdc++-v3/libsupc++/atexit_thread.cc | 23 +++++++++++++++++++++++
 libstdc++-v3/libsupc++/guard.cc  | 23 +++++++++++++++++++++++
 14 files changed, 93 insertions(+), 3 deletions(-)
 create mode 100644 config/i386/mingw-mcfgthread.h
 create mode 100644 libgcc/config/i386/gthr-mcf.h
 create mode 100644 libgcc/config/i386/t-mingw-mcfgthread

diff --git a/gcc/config.gcc b/gcc/config.gcc
index 00000000000..11111111111 100644
--- a/gcc/config.gcc
+++ b/gcc/config.gcc
@@ -100,6 +100,9 @@ if test x$enable_threads = xposix ; then
 	tm_file="${tm_file} i386/mingw-pthread.h"
 fi
+	if test x$enable_threads = xmcf ; then
+		tm_file="${tm_file} i386/mingw-mcfgthread.h"
+	fi
 	tm_file="${tm_file} i386/mingw32.h"
 
 # This must be last, as it is included by all mingw targets.
diff --git a/gcc/configure b/gcc/configure
index 00000000000..11111111111 100755
--- a/gcc/configure
+++ b/gcc/configure
@@ -500,7 +500,7 @@ case ${enable_threads} in
     target_thread_file='single'
     ;;
   aix | dce | lynx | mipssde | posix | rtems | \
-  single | tpf | vxworks | win32)
+  single | tpf | vxworks | win32 | mcf)
     target_thread_file=${enable_threads}
     ;;
   *)
diff --git a/gcc/configure.ac b/gcc/configure.ac
index 00000000000..11111111111 100644
--- a/gcc/configure.ac
+++ b/gcc/configure.ac
@@ -500,7 +500,7 @@ case ${enable_threads} in
     target_thread_file='single'
     ;;
   aix | dce | lynx | mipssde | posix | rtems | \
-  single | tpf | vxworks | win32)
+  single | tpf | vxworks | win32 | mcf)
     target_thread_file=${enable_threads}
     ;;
   *)
diff --git a/config/i386/mingw-mcfgthread.h b/config/i386/mingw-mcfgthread.h
new file mode 100644
index 00000000000..11111111111
--- /dev/null
+++ b/config/i386/mingw-mcfgthread.h
@@ -0,0 +1 @@
+#define TARGET_USING_MCFGTHREAD  1
diff --git a/gcc/config/i386/mingw32.h b/gcc/config/i386/mingw32.h
index 00000000000..11111111111 100644
--- a/gcc/config/i386/mingw32.h
+++ b/gcc/config/i386/mingw32.h
@@ -50,6 +50,9 @@
 #undef TARGET_SUBTARGET_DEFAULT
 #define TARGET_SUBTARGET_DEFAULT \
 	(MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS \
+ #ifndef TARGET_USING_MCFGTHREAD
+ #define TARGET_USING_MCFGTHREAD  0
+ #endif
 /* See i386/crtdll.h for an alternative definition. _INTEGRAL_MAX_BITS
    is for compatibility with native compiler.  */
 #define EXTRA_OS_CPP_BUILTINS()					\
@@ -100,6 +103,9 @@ EXTRA_OS_CPP_BUILTINS()					\
 	  builtin_define ("_WIN64");				\
 	}							\
+      if (TARGET_USING_MCFGTHREAD)				\
+	builtin_define ("__USING_MCFGTHREAD__");		\
     }								\
   while (0)
 
@@ -150,6 +156,10 @@ EXTRA_OS_CPP_BUILTINS()					\
 #define SHARED_LIBGCC_SPEC " -lgcc "
 #endif
+ #if TARGET_USING_MCFGTHREAD
+ #define MCFGTHREAD_SPEC  " -lmcfgthread -lkernel32 -lntdll "
+ #else
+ #define MCFGTHREAD_SPEC  ""
+ #endif
 #undef REAL_LIBGCC_SPEC
 #define REAL_LIBGCC_SPEC \
   "%{mthreads:-lmingwthrd} -lmingw32 \
    " SHARED_LIBGCC_SPEC " \
-   -lmoldname -lmingwex -lmsvcrt -lkernel32 "
+   -lmoldname -lmingwex -lmsvcrt -lkernel32 " MCFGTHREAD_SPEC
diff --git a/libatomic/configure.tgt b/libatomic/configure.tgt
index 00000000000..11111111111 100644
--- a/libatomic/configure.tgt
+++ b/libatomic/configure.tgt
@@ -50,7 +50,7 @@ case ${target} in
   *-*-mingw*)
 	# OS support for atomic primitives.
         case ${target_thread_file} in
-          win32)
+          win32 | mcf | single)
             config_path="${config_path} mingw"
             ;;
           posix)
diff --git a/libgcc/config.host b/libgcc/config.host
index 00000000000..11111111111 100644
--- a/libgcc/config.host
+++ b/libgcc/config.host
@@ -100,6 +100,9 @@ i[34567]86-*-mingw*)
 	  posix)
 	    tmake_thr_file="i386/t-mingw-pthread"
 	    ;;
+	  mcf)
+	    tmake_thr_file="i386/t-mingw-mcfgthread"
+	    ;;
 	esac
 	# This has to match the logic for DWARF2_UNWIND_INFO in gcc/config/i386/cygming.h
 	if test x$ac_cv_sjlj_exceptions = xyes; then
@@ -150,6 +153,9 @@ x86_64-*-mingw*)
 	  posix)
 	    tmake_thr_file="i386/t-mingw-pthread"
 	    ;;
+	  mcf)
+	    tmake_thr_file="i386/t-mingw-mcfgthread"
+	    ;;
 	esac
 	# This has to match the logic for DWARF2_UNWIND_INFO in gcc/config/i386/cygming.h
 	if test x$ac_cv_sjlj_exceptions = xyes; then
diff --git a/libgcc/configure b/libgcc/configure
index 00000000000..11111111111 100755
--- a/libgcc/configure
+++ b/libgcc/configure
@@ -200,6 +200,7 @@ case $target_thread_file in
     win32)	thread_header=config/i386/gthr-win32.h ;;
+    mcf)	thread_header=config/i386/gthr-mcf.h ;;
 esac
diff --git a/libgcc/config/i386/gthr-mcf.h b/libgcc/config/i386/gthr-mcf.h
new file mode 100644
index 00000000000..11111111111
--- /dev/null
+++ b/libgcc/config/i386/gthr-mcf.h
@@ -0,0 +1,14 @@
+ #ifdef _LIBOBJC
+
+ /* libobjc references some internal structures and requires a
+  * dedicated set of functions.  */
+ #include <mcfgthread/gthr_libobjc.h>
+
+ #else  /* _LIBOBJC  */
+
+ /* This is for libgcc and libstdc++.  */
+ #include <mcfgthread/gthr.h>
+
+ #endif  /* _LIBOBJC  */
diff --git a/libgcc/config/i386/t-mingw-mcfgthread b/libgcc/config/i386/t-mingw-mcfgthread
new file mode 100644
index 00000000000..11111111111
--- /dev/null
+++ b/libgcc/config/i386/t-mingw-mcfgthread
@@ -0,0 +1,2 @@
+ SHLIB_MCFGTHREAD_LIBS = -lmcfgthread -lkernel32 -lntdll
diff --git a/libgcc/config/i386/t-slibgcc-cygming b/libgcc/config/i386/t-slibgcc-cygming
index 00000000000..11111111111 100644
--- a/libgcc/config/i386/t-slibgcc-cygming
+++ b/libgcc/config/i386/t-slibgcc-cygming
@@ -10,6 +10,9 @@ ifndef SHLIB_PTHREAD_LDFLAG
 SHLIB_PTHREAD_LDFLAG =
 endif
+ ifndef SHLIB_MCFGTHREAD_LIBS
+ SHLIB_MCFGTHREAD_LIBS =
+ endif
 SHLIB_LINK = $(LN_S) -f $(SHLIB_MAP) $(SHLIB_MAP).def && \
 	if [ ! -d $(SHLIB_DIR) ]; then \
 		mkdir $(SHLIB_DIR); \
@@ -20,7 +23,7 @@ SHLIB_LINK = $(LN_S) -f $(SHLIB_MAP) $(SHLIB_MAP).def && \
 	$(CC) $(LIBGCC2_CFLAGS) $(SHLIB_PTHREAD_CFLAG) \
 	-shared -nodefaultlibs \
 	$(SHLIB_MAP).def \
	-Wl,--out-implib,$(SHLIB_DIR)/$(SHLIB_IMPLIB).tmp \
 	-o $(SHLIB_DIR)/$(SHLIB_SONAME).tmp @multilib_flags@ \
-	$(SHLIB_OBJS) ${SHLIB_PTHREAD_LDFLAG} $(SHLIB_LC) && \
+	$(SHLIB_OBJS) ${SHLIB_PTHREAD_LDFLAG} $(SHLIB_LC) \
+	$(SHLIB_MCFGTHREAD_LIBS) && \
 	if [ -f $(SHLIB_DIR)/$(SHLIB_SONAME) ]; then \
 	  mv -f $(SHLIB_DIR)/$(SHLIB_SONAME) \
diff --git a/libstdc++-v3/configure b/libstdc++-v3/configure
index 00000000000..11111111111 100755
--- a/libstdc++-v3/configure
+++ b/libstdc++-v3/configure
@@ -200,6 +200,7 @@ case $target_thread_file in
     win32)	thread_header=config/i386/gthr-win32.h ;;
+    mcf)	thread_header=config/i386/gthr-mcf.h ;;
 esac
diff --git a/libstdc++-v3/libsupc++/atexit_thread.cc b/libstdc++-v3/libsupc++/atexit_thread.cc
index 00000000000..11111111111 100644
--- a/libstdc++-v3/libsupc++/atexit_thread.cc
+++ b/libstdc++-v3/libsupc++/atexit_thread.cc
@@ -30,6 +30,23 @@
 #include <new>
 #include "bits/gthr.h"
+
+ #ifdef __USING_MCFGTHREAD__
+
+ #include <mcfgthread/cxa.h>
+
+ namespace __cxxabiv1 {
+
+ extern "C" int
+ __cxa_thread_atexit (void (_GLIBCXX_CDTOR_CALLABI *dtor)(void *),
+		     void *obj, void *dso_handle) _GLIBCXX_NOTHROW
+ {
+  return __MCF_cxa_thread_atexit (dtor, obj, dso_handle);
+ }
+
+ }  // namespace __cxxabiv1
+
+ #else // __USING_MCFGTHREAD__
+
 #ifdef _GLIBCXX_THREAD_ATEXIT_WIN32
 #define WIN32_LEAN_AND_MEAN
 #include <windows.h>
@@ -60,6 +77,9 @@
   }
   return 0;
 }
 #endif /* _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL */
+
+ #endif // __USING_MCFGTHREAD__
diff --git a/libstdc++-v3/libsupc++/guard.cc b/libstdc++-v3/libsupc++/guard.cc
index 00000000000..11111111111 100644
--- a/libstdc++-v3/libsupc++/guard.cc
+++ b/libstdc++-v3/libsupc++/guard.cc
@@ -30,6 +30,23 @@
 #include <exception>
 #include <new>
+
+ #ifdef __USING_MCFGTHREAD__
+
+ #include <mcfgthread/cxa.h>
+
+ namespace __cxxabiv1 {
+
+ extern "C" int
+ __cxa_guard_acquire (__guard* g) _GLIBCXX_NOTHROW
+  {
+    return __MCF_cxa_guard_acquire(g);
+  }
+
+ extern "C" void
+ __cxa_guard_release (__guard* g) _GLIBCXX_NOTHROW
+  {
+    __MCF_cxa_guard_release(g);
+  }
+
+ extern "C" void
+ __cxa_guard_abort (__guard* g) _GLIBCXX_NOTHROW
+  {
+    __MCF_cxa_guard_abort(g);
+  }
+
+ }  // namespace __cxxabiv1
+
+ #else // __USING_MCFGTHREAD__
+
 #include <ext/atomicity.h>
 #include <ext/concurrence.h>
 #include <bits/atomic_lockfree_defines.h>
@@ -100,6 +123,9 @@
     _GLIBCXX_GUARD_SET_AND_RELEASE (g);
 #if defined(__GTHREADS) && !defined(__GTHREAD_HAS_COND)
     // This provides compatibility with older systems not supporting POSIX like
     // condition variables.
     if (__gthread_active_p())
       static_mutex->unlock();
 #endif
   }
 }
+ #endif // __USING_MCFGTHREAD__
-- 
2.34.1